#streamlit코드, Ollama 모델 호출

import streamlit as st
import pandas as pd
import ollama

st.set_page_config(page_title="실시간 경기 예측 챗봇")

st.title("축구 경기 예측 (CSV 기반 자동 업데이트)")

# 1. CSV에서 경기 데이터 불러오기
@st.cache_data
def load_match_data():
    return pd.read_csv("matches.csv")

df = load_match_data()

# 2. 사용자 입력 받기
if "history" not in st.session_state:
    st.session_state["history"] = []

for msg in st.session_state["history"]:
    with st.chat_message(msg["role"]):
        st.write(msg["content"])

prompt = st.chat_input("예: Arsenal vs Chelsea 결과는?")
if prompt:
    st.chat_message("user").write(prompt)
    st.session_state["history"].append({"role": "user", "content": prompt})

    # 3. 경기 이름이 포함된 행 탐색
    match_row = df[df["match_name"].str.lower().str.contains(prompt.lower())]

    if not match_row.empty:
        row = match_row.iloc[0]
        context = f"""
경기 정보:
- 홈팀: {row['home_team']} (최근 성적: {row['home_form']}, 평균 득점: {row['home_avg_goals']}, 순위: {row['home_rank']})
- 원정팀: {row['away_team']} (최근 성적: {row['away_form']}, 평균 득점: {row['away_avg_goals']}, 순위: {row['away_rank']})
장소: {row['location']}

위 정보를 바탕으로 경기 결과를 예측하고 이유를 설명해줘.
"""
        st.session_state["history"].append({"role": "system", "content": context})
    else:
        context = "경기 정보를 찾을 수 없습니다. 다시 입력해 주세요."

    # 4. Ollama 모델 호출
    response = ollama.chat(
        model="gemma:2b",
        messages=st.session_state["history"]
    )

    st.chat_message("assistant").write(response["message"]["content"])
    st.session_state["history"].append({
        "role": "assistant",
        "content": response["message"]["content"]
    })
